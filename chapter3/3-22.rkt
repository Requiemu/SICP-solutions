#lang planet neil/sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?) 
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" )
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((pair (cons item '())))
        (cond ((null? front-ptr)
               (begin (set-front-ptr! pair)
                      (set-rear-ptr! pair)
                      front-ptr))
              (else (begin (set-cdr! rear-ptr pair)
                           (set-rear-ptr! pair)
                           front-ptr)))))
    (define (delete-queue!) 
      (if (empty-queue?) 
          (error "DELETE-QUEUE! called with a empty queue" )
          (begin (set-front-ptr! (cdr front-ptr))
                 front-ptr)))
    (define (display-queue) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'display-queue) display-queue)
            (else (error "DISPATCH--invalid request" m))))
    dispatch))

(define (empty-queue? queue) ((queue 'empty-queue?)))

(define (front-queue queue) ((queue 'front-queue)))

(define (insert-queue! queue item) ((queue 'insert-queue!) item))

(define (delete-queue! queue) ((queue 'delete-queue!)))

(define (display-queue queue) ((queue 'display-queue)))

(define m (make-queue))
(display-queue m)

(insert-queue! m 'a)
(display-queue m)
(insert-queue! m 'b)

(delete-queue! m)
(display-queue m)